/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VolumesIndexImport } from './routes/volumes/index'
import { Route as StateIndexImport } from './routes/state/index'
import { Route as ImagesIndexImport } from './routes/images/index'
import { Route as V2ContainerIndexImport } from './routes/v2/container/index'
import { Route as ImagesIdIndexImport } from './routes/images/$id/index'
import { Route as V2ContainerIdImport } from './routes/v2.container.$id'
import { Route as V2ComposeNameImport } from './routes/v2/compose/$name'

// Create/Update Routes

const VolumesIndexRoute = VolumesIndexImport.update({
  path: '/volumes/',
  getParentRoute: () => rootRoute,
} as any)

const StateIndexRoute = StateIndexImport.update({
  path: '/state/',
  getParentRoute: () => rootRoute,
} as any)

const ImagesIndexRoute = ImagesIndexImport.update({
  path: '/images/',
  getParentRoute: () => rootRoute,
} as any)

const V2ContainerIndexRoute = V2ContainerIndexImport.update({
  path: '/v2/container/',
  getParentRoute: () => rootRoute,
} as any)

const ImagesIdIndexRoute = ImagesIdIndexImport.update({
  path: '/images/$id/',
  getParentRoute: () => rootRoute,
} as any)

const V2ContainerIdRoute = V2ContainerIdImport.update({
  path: '/v2/container/$id',
  getParentRoute: () => rootRoute,
} as any)

const V2ComposeNameRoute = V2ComposeNameImport.update({
  path: '/v2/compose/$name',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/images/': {
      id: '/images/'
      path: '/images'
      fullPath: '/images'
      preLoaderRoute: typeof ImagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/state/': {
      id: '/state/'
      path: '/state'
      fullPath: '/state'
      preLoaderRoute: typeof StateIndexImport
      parentRoute: typeof rootRoute
    }
    '/volumes/': {
      id: '/volumes/'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof VolumesIndexImport
      parentRoute: typeof rootRoute
    }
    '/v2/compose/$name': {
      id: '/v2/compose/$name'
      path: '/v2/compose/$name'
      fullPath: '/v2/compose/$name'
      preLoaderRoute: typeof V2ComposeNameImport
      parentRoute: typeof rootRoute
    }
    '/v2/container/$id': {
      id: '/v2/container/$id'
      path: '/v2/container/$id'
      fullPath: '/v2/container/$id'
      preLoaderRoute: typeof V2ContainerIdImport
      parentRoute: typeof rootRoute
    }
    '/images/$id/': {
      id: '/images/$id/'
      path: '/images/$id'
      fullPath: '/images/$id'
      preLoaderRoute: typeof ImagesIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/v2/container/': {
      id: '/v2/container/'
      path: '/v2/container'
      fullPath: '/v2/container'
      preLoaderRoute: typeof V2ContainerIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  ImagesIndexRoute,
  StateIndexRoute,
  VolumesIndexRoute,
  V2ComposeNameRoute,
  V2ContainerIdRoute,
  ImagesIdIndexRoute,
  V2ContainerIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "children": [
        "/images/",
        "/state/",
        "/volumes/",
        "/v2/compose/$name",
        "/v2/container/$id",
        "/images/$id/",
        "/v2/container/"
      ]
    },
    "/images/": {
      "filePath": "images/index.tsx"
    },
    "/state/": {
      "filePath": "state/index.tsx"
    },
    "/volumes/": {
      "filePath": "volumes/index.tsx"
    },
    "/v2/compose/$name": {
      "filePath": "v2/compose/$name.tsx"
    },
    "/v2/container/$id": {
      "filePath": "v2.container.$id.tsx"
    },
    "/images/$id/": {
      "filePath": "images/$id/index.tsx"
    },
    "/v2/container/": {
      "filePath": "v2/container/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
